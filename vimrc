" Initialize Vundle (plugin manager)
set nocompatible              " be iMproved, required
filetype off                  " required
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" Plugin Declarations
Plugin 'gmarik/Vundle.vim' " Vundle itself
Plugin 'ycm-core/YouCompleteMe' " Advanced code completion.
Plugin 'octol/vim-cpp-enhanced-highlight' " Enhanced C++ syntax highlighting.
Plugin 'dense-analysis/ale' " Linting and syntax checking.
Plugin 'arrufat/vala.vim' " Vala language support.
Plugin 'fatih/vim-go' " Go language support.
Plugin 'rust-lang/rust.vim' " Rust language support.
Plugin 'scrooloose/nerdcommenter' " Easy code commenting.
Plugin 'flazz/vim-colorschemes' " Collection of color schemes.
Plugin 'airblade/vim-gitgutter' " Shows git diff in the gutter.
Plugin 'yegappan/mru' " Most recently used files list.
Plugin 'kien/ctrlp.vim' " Full path fuzzy file finder.
Plugin 'vim-scripts/BufOnly.vim' " Close all buffers but the current one.
Plugin 'tpope/vim-endwise' " Automatically closes blocks and statements.
Plugin 'mbbill/undotree' " Visualize Vim's undo history.
Plugin 'ap/vim-css-color' " CSS color previewing.

" Load the plugins
call vundle#end()

" Filetype detection
filetype plugin indent on    " required

" Core Settings
set backspace=2
syntax enable
set background=dark
set t_Co=256
if has("termguicolors")
    set termguicolors
endif

" Set color scheme
colorscheme monokai-chris

" Workaround a problem with background color of vim-gitgutter.
" https://github.com/airblade/vim-gitgutter/issues/696
highlight! link SignColumn LineNr
autocmd ColorScheme * highlight! link SignColumn LineNr

" Additional settings
set history=50
set ruler
set cursorline
set showcmd
set laststatus=2
set encoding=utf-8
set clipboard=unnamed
set noswapfile
set colorcolumn=80,120
set nu
set nopaste
set et
set tabstop=2 shiftwidth=2 expandtab
let mapleader = "\<Space>"

" Key mappings
imap jj <Esc>
nmap <silent> <Leader>0 :set paste!<CR>
nmap <silent> <Leader>1 :Gstatus<CR>
nmap <silent> <Leader>2 :Gcommit<CR>
nmap <silent> <Leader>3 :Gdiff<CR>
nmap <silent> <Leader>5 :RuboCop<CR>
nmap <silent> <Leader>8 :set nonumber!<CR>
nmap <silent> <Leader>9 :set nowrap!<CR>
nmap <silent> <Leader>+ :TestFile<CR>
nmap <silent> <Leader>_ :TestNearest<CR>
nmap <silent> <Leader>a <C-f>
nmap <silent> <Leader>Cl y gv <Leader>cl
nmap <silent> <Leader>d <Plug>DashSearch
nmap <silent> <Leader>e :UndotreeToggle<CR>
nmap <silent> <Leader>g :execute "tabmove" tabpagenr() -2<CR>
nmap <silent> <Leader>h :%!clang-format<CR>
nmap <silent> <Leader>i *
nmap <silent> <Leader>j :tabprevious<CR>
nmap <silent> <Leader>k :tabnext<CR>
nmap <silent> <Leader>l :nohl<CR><C-l>
nmap <silent> <Leader>o :/
nmap <silent> <Leader>p :CtrlPMixed<CR>
nmap <silent> <Leader>q :q!<CR>
nmap <silent> <Leader>r :%s/\(<c-r>=expand("<cword>")<CR>\)/
nmap <silent> <Leader>s <C-b>
nmap <silent> <Leader>S :sp
nmap <silent> <Leader>t :tabnew<CR>
nmap <silent> <Leader>T :BufOnly<CR>
nmap <silent> <Leader>v :NERDTreeToggle<CR>
nmap <silent> <Leader>w :w<CR>
nmap <silent> <Leader>W :wq<CR>
nmap <silent> <Leader>z <C-z>
nnoremap <Leader>; :

" Additional custom settings
" Add any custom commands or settings here

let g:ycm_confirm_extra_conf = 0 " turn off the prompts generated by YouCompleteMe (YCM) 

" Disable specific linters (add as needed)
let g:ale_linters = {
    \ 'c': ['clang'],
    \ 'cpp': ['clang'],
    \ 'python': ['pylint'],
    \ 'go': ['golangci-lint'],
    \ 'javascript': ['eslint'],
    \ 'ruby': ['rubocop'],
    \ 'vala': ['valac'],
    \ 'bash': ['shellcheck'],
    \ }

" Set ALE options (customize as needed)
let g:ale_sign_error = '✘'  " Symbol for error signs
let g:ale_sign_warning = '⚠'  " Symbol for warning signs

" Configure ALE for C++ code formatting
let g:ale_cpp_clang_format_executable = 'clang-format'

" Set filetype-specific ALE settings
augroup ale_settings
    autocmd!
    autocmd FileType c,cpp,objc,c-header,cpp-header let b:ale_linters = ['clang']
    autocmd FileType c,cpp,objc,c-header,cpp-header let b:ale_linters_explicit = 1
    autocmd FileType c,cpp,objc,c-header,cpp-header let b:ale_fixers = ['clang-format']
    autocmd FileType bash let b:ale_linters = ['shellcheck'] " ShellCheck for Bash scripts
augroup END
